AWSTemplateFormatVersion: "2010-09-09"
Description: 'AWS Batch via Fargate'
Parameters:
  YourVpcId:
    Type: String
  YourSubnet1:
    Type: String
  YourSubnet2:          
    Type: String
  TodoBucket:
    Type: String
Resources:
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      State: ENABLED
      ServiceRole: !Ref ServiceRole
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 1
        Subnets:
        - !Ref YourSubnet1
        - !Ref YourSubnet2
        SecurityGroupIds:
        - !Ref JobSG
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'batch.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole'
  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref ComputeEnvironment
          Order: 1
      Priority: 1
      State: ENABLED
  JobSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref YourVpcId
      GroupDescription: 'Security Group for Batch job'
  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: ascp_test_job_def
      PlatformCapabilities:
      - FARGATE
      Timeout:
        AttemptDurationSeconds: 300
      RetryStrategy:
        Attempts: 1
      ContainerProperties:
        Command:
        - ascp
        #- --version
        Image: 'mitchac/asperacli:latest'
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        ResourceRequirements:
        - Type: VCPU
          Value: 0.5
        - Type: MEMORY
          Value: 1024
        JobRoleArn: !GetAtt JobRole.Arn
        ExecutionRoleArn: !GetAtt ExecutionRole.Arn
        LogConfiguration:
          LogDriver: awslogs
          Options:
            "awslogs-group": !Ref LogGroup
            "awslogs-stream-prefix": "prefix"
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
     AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
     ManagedPolicyArns:
     - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  JobRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchEventsFullAccess'
        - 'arn:aws:iam::aws:policy/AWSBatchFullAccess'
  BatchFargateStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: 
        !Sub
        - |-
          {
            "StartAt": "Initialize",
            "States": {
              "Initialize": {
                "Type": "Pass",
                "InputPath": "$",
                "Parameters": {
                  "params.$": "$.params"
                },
                "Next": "Hello"
              },
              "Hello": {
                "Type": "Task",
                "InputPath": "$",
                "ResultPath": "$.result",
                "Resource": "arn:aws:states:::batch:submitJob.sync",
                "Parameters": {
                  "JobDefinition": "ascp_test_job_def",
                  "JobName": "SfnBatchtest",
                  "JobQueue": "${JobQueue}",
                  "ContainerOverrides": {
                    "Environment": [
                      {"Name": "SAMPLE_ID", "Value.$": "$.params.SAMPLE_ID"}
                    ],
                    "Command": [
                      "echo ${!SAMPLE_ID}"
                    ]
                  }
                },
                "Next": "World"
              },
              "World": {
                "Type": "Pass",
                "Result": "World",
                "End": true
              }
            }
          }
        - {
          JobQueue: !Ref JobQueue
          }
      RoleArn: !GetAtt [ StepFunctionsExecutionRole, Arn ]
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '', [ '/', { Ref: 'AWS::StackName' }, '/log' ] ]
      RetentionInDays: 14
