AWSTemplateFormatVersion: "2010-09-09"
Description: 'AWS Batch via Fargate'
Parameters:
  YourVpcId:
    Type: String
  YourSubnet1:
    Type: String
  YourSubnet2:          
    Type: String
  TodoBucket:
    Type: String
Resources:
  ComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      Type: MANAGED
      State: ENABLED
      ServiceRole: !Ref ServiceRole
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 1
        Subnets:
        - !Ref YourSubnet1
        - !Ref YourSubnet2
        SecurityGroupIds:
        - !Ref JobSG
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'batch.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole'
  JobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref ComputeEnvironment
          Order: 1
      Priority: 1
      State: ENABLED
  JobSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref YourVpcId
      GroupDescription: 'Security Group for Batch job'
 # JobDefinition:
 #   Type: AWS::Batch::JobDefinition
 #   Properties:
 #     Type: container
 #     JobDefinitionName: { Ref: "AWS::StackName" }
 #     PlatformCapabilities:
 #     - FARGATE
 #     Timeout:
 #       AttemptDurationSeconds: 60
 #     RetryStrategy:
 #       Attempts: 1
 #     ContainerProperties:
 #       Command:
 #       - echo
 #       - hello
 #       - worldo
 #       Image: 'debian:latest'
 #       NetworkConfiguration:
 #         AssignPublicIp: ENABLED
 #         ResourceRequirements:
 #       - Type: VCPU
 #         Value: 0.5
 #       - Type: MEMORY
 #         Value: 1024
 #       JobRoleArn: !GetAtt JobRole.Arn
 #       ExecutionRoleArn: !GetAtt ExecutionRole.Arn
 #       LogConfiguration:
 #         LogDriver: awslogs
 #         Options:
 #           "awslogs-group": !Ref LogGroup
 #           "awslogs-stream-prefix": "prefix"
  JobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      JobDefinitionName: ascp_test_job_def
      PlatformCapabilities:
      - FARGATE
      Timeout:
        AttemptDurationSeconds: 300
      RetryStrategy:
        Attempts: 1
      ContainerProperties:
        Command:
        - ascp
        - --version
        Image: 'mitchac/asperacli:latest'
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        ResourceRequirements:
        - Type: VCPU
          Value: 0.5
        - Type: MEMORY
          Value: 1024
        JobRoleArn: !GetAtt JobRole.Arn
        ExecutionRoleArn: !GetAtt ExecutionRole.Arn
        LogConfiguration:
          LogDriver: awslogs
          Options:
            "awslogs-group": !Ref LogGroup
            "awslogs-stream-prefix": "prefix"
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
     AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
     ManagedPolicyArns:
     - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  JobRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      # Policy for the Job to access resources on AWS. Adapt as necessary
 #     Policies:
 #     - PolicyName: BucketAccess
 #       PolicyDocument:
 #         Version: 2012-10-17
 #         Statement:
 #           - Effect: Allow
 #             Action: [ 's3:GetObject', 's3:PutObject' ]
 #             Resource:
 #             - !Join ['', ['arn:aws:s3:::', { Ref: TodoBucket }, '/*' ] ]
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        #- 'arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole'
        - 'arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchEventsFullAccess'
        - 'arn:aws:iam::aws:policy/AWSBatchFullAccess'
  #    Policies:
  #    -
  #      PolicyName: cfevents
  #      PolicyDocument:
  #        Version: 2012-10-17
  #        Statement:
  #        - Effect: Allow
  #          Action:
  #          - events:PutTargets
  #          - events:PutRule
  #          - events:DescribeRule
  #          Resource: 
  #          - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
  #SfnStateMachine:
  #  Type: AWS::StepFunctions::StateMachine
  #  Properties:
  #    DefinitionString: |-
  #      {
  #        "Comment": "A Hello World example of the Amazon States Language using Pass states",
  #        "StartAt": "Hello",
  #        "States": {
  #          "Hello": {
  #            "Type": "Pass",
  #            "Result": "Hello",
  #            "Next": "World"
  #          },
  #          "World": {
  #            "Type": "Pass",
  #            "Result": "World",
  #            "End": true
  #          }
  #        }
  #      }
  #    RoleArn: !GetAtt [ StepFunctionsExecutionRole, Arn ]
  BatchFargateStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: 
        !Sub
        - |-
          {
            "StartAt": "Hello",
            "States": {
              "Hello": {
                "Type": "Task",
                "Resource": "arn:aws:states:::batch:submitJob.sync",
                "Parameters": {
                  "JobDefinition": "ascp_test_job_def",
                  "JobName": "SfnBatchtest",
                  "JobQueue": "${JobQueue}",
                  "ContainerOverrides": {
                  }
                },
                "Next": "World"
              },
              "World": {
                "Type": "Pass",
                "Result": "World",
                "End": true
              }
            }
          }
        - {
          JobQueue: !Ref JobQueue
          }
      RoleArn: !GetAtt [ StepFunctionsExecutionRole, Arn ]
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '', [ '/', { Ref: 'AWS::StackName' }, '/log' ] ]
      RetentionInDays: 14
